---
title: Intro to Git and GitHub {{< iconify pajamas:gitea style="color:#48BDF3;">}}
author: Frank Aragona & Juan Salazar 
format: 
    revealjs: 
        theme: [default, styles.scss]
        width: 1500
revealjs-plugins:
    - excalidraw
knitr: true
---

## the problem

::::{.columns}

:::{.column .incremental}
-   multiple files for the same script
-   easy to lose track of production version
-   terrible for collaboration
    -    who has the main script? 
    -    who deleted my changes? 
    -    conflicts?
    -    I overwrote my code and lost everything {{< iconify twemoji:melting-face >}} 
:::

:::{.column}

:::{.box}
{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_datatable_conversion.R

{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_datatable_conversion_local.R

{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_updated.R

{{< iconify vscode-icons:file-type-rproj >}} 2021223_AllTests_dplyr_FA.R

{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_dplyr_conversion_JS.R
:::

:::

::::

:::{.notes}
- We've probably all been in this scenario where we have multiple versions of the same R script 
- there are multiple files, each with slightly different names
- nobody remembers what each file really contains or how they differ,
- and it creates a chaotic environment where we don't know what the source of _truth_ is

- so we lose track of production versions,
- and it's terrible for collaboration
:::

## what is Git?

:::::: columns

:::{.column .incremental}
-   [Git](https://git-scm.com/) is version control software
-   projects have branches
-   create new branches to test code
-   isolate while keeping the `main` branch clean
-   transparent, keeps track of _everything_
-   prevents overwriting/losing your changes
:::

::: column
![](images/branch.png)
:::

::::::

:::{.notes}
- Teams often try to develop their own standards to control script versions,
- but there is no better management system than Git. It has become the software industry's standard for good reason

- Git is version control software that lets you isolate your _source of truth_ code from your development code 
- projects have branches; in this figure you can see a main branch that holds the _production_ or _source of truth_ code
- if someone wants to edit, they can make an isolated copy, or branch, of that source.
- It's transparent - it lets you see the entire history of your code base
- and prevents accidental overwrites of your code
:::

## what is GitHub?

:::::: columns
:::: column
::: incremental
-   [GitHub](https://github.com/) is a platform that hosts Git repositories
-   code management
-   project management
-   it's where you collaborate
-   helps with isolating _your_ changes from your main code
-   transparent, helps see _everything_
:::
::::

::: column
![](images/svn.svg)
:::

::::::

:::{.notes}
- GitHub is a platform that hosts your Git repository, or Git Project
- the figure on the right shows a Git repo. Each team member can make a clone, or copy, of the repo and work on _isolated_ changes to the code 
- It's kinda like the UI for Git management
- it's good for code management, project management
- it's where you will collaborate and discuss code changes
- and it lets you visualize the Git history
:::

## tl;dr

::: {.v-center-container .incremental}
-   Git repos {{< iconify pajamas:git style="color:#D0927D;" >}} -> **movies** üéûÔ∏è
-   GitHub {{< iconify pajamas:github >}} -> **Netflix** ‚òÅÔ∏è
:::

:::{.notes}

- Git repositories, or projects, are like movies
- GitHub is like Netflix - it stores all your movies

- Imagine your team wants to edit scenes in a movie
- Git allows your team to make edits to the scenes and keeps track of all the changes that were made
- It also helps to prevent conflicts between your scene edits and your teammates edits.


- When you want to work on a project, you can pull the movie from Netflix and work on scene edits in isolation
- This isn't the best analogy because there is a lot more that GitHub does

:::


## benefits of Git - code management

::::{.columns}

:::{.column .incremental}
-   **transparency:** view the entire history of your code
-   **time travel:** roll back to previous versions 
-   **organization:** clear division of production and development
:::

:::{.column}
![](images/code_change.png)
:::

::::

## benefits of GitHub - project management

::::{.columns}

:::{.column .incremental}
-   **transparency:** track all conversations and decisions
-   **organization:** easy to tag and search tasks
    -    can use like smartsheet
    -    auto links tasks to your code
:::

:::{.column}
![](images/issues.png)
:::

::::


## what do we use it for

-   all code development
-   single 'one-off' scripts
-   big collaborative projects
-   whenever we need to share code


## how to use Git/GitHub in practice

::: panel-tabset

### 1. clone


::::{.columns}

:::{.column }
-   find a repo in GitHub
-   clone the repo: copy the whole repo to a folder on your laptop
:::

:::{.column}
![](images/OpenwGitHubDesktop.png)
:::

::::

### 2. create a branch

::::{.columns}

:::{.column}

-   make your own branch for your isolated edits
-   keeps the main branch clean

:::

:::{.column}
![](images/create_branch.gif)
:::

::::


### 3. commit 

::::{.columns}

:::{.column}
-   write code like normal
-   save, and **commit** code to branch
-   commits are changes stored in the branch
-   make small, frequent commits if possible
:::

:::{.column}
![](images/issues.png)
:::

::::

### 4. push

::::{.columns}

:::{.column}
-   after you save and commit,
-   **push** branch to GitHub
-   like taking your local changes and _pushing_ them to GitHub where your team can see the changes
:::

:::{.column}
![](images/issues.png)
:::

::::

### pull

-   pull the latest version of a branch
-   it will _pull_ the latest changes your teammates made into your local clone
-   should pull regularly throughout the process

:::

## DOH-EPI-Coders

::: incremental
-   Our private DOH repos
-   Can request for a license
-   Teams channels for Q/A and discussions
:::

## 

```{ojs}
//| panel: sidebar 
 viewof scan = Inputs.button([
        ["Base Timeline", value => 1],
        ["Top Language", value => 2],
        ["Top 5 Repos", value => 3],
        ["Size", value => 4]
 ],
        {value: 1, label: "Click Plot Type:"}
);

```

{{< include _beeswarm_plot.qmd >}}

## Examples 

- scripts to create data files ([lineage classifications](https://github.com/NW-PaGe/lineage_classifications))
- [data processing scripts](https://github.com/WAState-DeptHEALTH/COVID-Data-Quality)

## GitHub Pages

-   GitHub can host static webpages for free
-   Works well with Quarto and Rmarkdown

##

::: {layout-ncol="2"}
### Python Packages

```{=html}
<iframe width="600" height="550" src="https://nw-page.github.io/wadoh_raccoon/" title="Quarto Documentation" class="myframe2"></iframe>
```
### ELR Documentation

```{=html}
<iframe width="600" height="550" src="https://nw-page.github.io/covid_seq_elr/" title="Quarto Documentation" class="myframe2"></iframe>
```
:::

## 

::: {layout-ncol="2"}
### Reports

```{=html}
<iframe width="600" height="550" src="https://nw-page.github.io/BacterialGenomicsSummaryOutput/" title="Quarto Documentation" class="myframe2"></iframe>
```
### Publications

```{=html}
<iframe width="600" height="550" src="https://nw-page.github.io/sequencing_integration_pipeline1.0/" title="Quarto Documentation" class="myframe2"></iframe>
```
:::

## Resources

- [DOH GitHub Policies](https://nw-page.github.io/standards/gh/)
- Internal Sharepoint Docs (ask for links) 
