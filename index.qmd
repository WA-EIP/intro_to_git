---
title: Intro to Git and GitHub {{< iconify pajamas:gitea style="color:#48BDF3;">}}
author: Frank Aragona & Juan Salazar 
format: 
    revealjs: 
        theme: [default, styles.scss]
        width: 1500
revealjs-plugins:
    - excalidraw
knitr: true
---

## the problem

::::{.columns}

:::{.column .incremental}
-   multiple files for the same script
-   easy to lose track of production version
-   terrible for collaboration
    -    who has the main script? 
    -    who deleted my changes? 
    -    conflicts?
    -    I overwrote my code and lost everything {{< iconify twemoji:melting-face >}} 
:::

:::{.column}

:::{.box}
{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_datatable_conversion.R

{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_datatable_conversion_local.R

{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_updated.R

{{< iconify vscode-icons:file-type-rproj >}} 2021223_AllTests_dplyr_FA.R

{{< iconify vscode-icons:file-type-rproj >}} 2021221_AllTests_dplyr_conversion_JS.R
:::

:::

::::

## what is Git?

:::::: columns

:::{.column .incremental}
-   [Git](https://git-scm.com/) is version control software
-   projects have branches
-   create new branches to test code
-   isolate while keeping the `main` branch clean
-   transparent, keeps track of _everything_
-   prevents overwriting/losing your changes
:::

::: column
![](images/branch.png)
:::

::::::

## what is GitHub?

:::::: columns
:::: column
::: incremental
-   [GitHub](https://github.com/) is a platform that hosts Git repositories
-   code management
-   project management
-   it's where you collaborate
-   helps with isolating _your_ changes from your main code
-   transparent, helps see _everything_
:::
::::

::: column
![](images/svn.svg)
:::

::::::

## tl;dr

::: {.v-center-container .incremental}
-   Git repos {{< iconify pajamas:git style="color:#D0927D;" >}} -> **movies** üéûÔ∏è
-   GitHub {{< iconify pajamas:github >}} -> **Netflix** ‚òÅÔ∏è
:::

:::{.notes}
- With Git, it's like you and your teammate want to edit the same scene. 
You want to do it in isolation so that _your_ edits don't overwrite _their_ edits

- When you're finished, you can take parts that you like from _your_ work 
and combine it with the parts from your _teammates_ work, all while keeping track of ALL the changes,
even the changes that didn't make the final cut.

- Then, when you and your teammate have a combined final edit, you can **push** the product into your movie

- GitHub is like Netflix - That's where your movie and all the historical changes can be watched or pulled

- This isn't the best analogy because there is a lot more that GitHub does

:::


## benefits of Git/GitHub - code management

::::{.columns}

:::{.column .incremental}
-   **transparency:** view the entire history of your code
-   **time travel:** roll back to previous versions 
-   **organization:** clear division of production and development
:::

:::{.column}
![](images/code_change.png)
:::

::::

## benefits of Git/GitHub - project management

::::{.columns}

:::{.column .incremental}
-   **transparency:** track all conversations and decisions
-   **organization:** easy to tag and search tasks
-   can use like smartsheet
-   auto links tasks to your code
:::

:::{.column}
![](images/issues.png)
:::

::::


## what do we use it for

-   all code development
-   single user or collaborative work


## how to use GitHub in practice

::: panel-tabset

### 1. clone


::::{.columns}

:::{.column }
-   clone: copy the whole repo to a folder on your laptop
:::

:::{.column}
![](images/OpenwGitHubDesktop.png)
:::

::::

### 2. create a branch

::::{.columns}

:::{.column}

-   make your own branch 
-   keep the main branch clean

:::

:::{.column}
![](images/create_branch.gif)
:::

::::


### 3. commit 

::::{.columns}

:::{.column}
-   write code like normal
-   save, and **commit** code to branch
-   commits are changes stored in the branch
-   make small, frequent commits if possible
:::

:::{.column}
![](images/issues.png)
:::

::::

### 4. push

::::{.columns}

:::{.column}
-   after you save and commit,
-   **push** branch to GitHub
-   like taking your local changes and _pushing_ them to GitHub where your team can see the changes
:::

:::{.column}
![](images/issues.png)
:::

::::

### pull

-   pull the latest version of a branch
-   it will _pull_ the latest changes your teammates made into your local clone
-   should pull regularly throughout the process

:::

## DOH-EPI-Coders

::: incremental
-   Our private DOH repos
-   Can request for a license
-   Teams channels for Q/A and discussions
:::

## 

```{ojs}
//| panel: sidebar 
 viewof scan = Inputs.button([
        ["Base Timeline", value => 1],
        ["Top Language", value => 2],
        ["Top 5 Repos", value => 3],
        ["Size", value => 4]
 ],
        {value: 1, label: "Click Plot Type:"}
);

```

{{< include _beeswarm_plot.qmd >}}

## Examples of DOH-EPI-Coders


## GitHub Pages

-   GitHub can host static webpages for free
-   Works well with Quarto and Rmarkdown
-   
